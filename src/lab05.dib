#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!csharp

#r "nuget: Microsoft.SemanticKernel.Agents.AzureAI, *-*"
#r "nuget: Microsoft.SemanticKernel.Agents.Core, *-*"
#r "nuget: Microsoft.SemanticKernel"
#r "nuget: Azure.Identity"
#r "nuget: dotenv.net"

#!csharp

using dotenv.net;
using dotenv.net.Utilities;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Agents;
using Microsoft.SemanticKernel.Agents.AzureAI;
using Microsoft.SemanticKernel.Agents.Chat;
using Microsoft.SemanticKernel.ChatCompletion;
using Azure.AI.Projects;
using Azure.Identity;
using System.ComponentModel;
using System.IO;

#!csharp

class LogFilePlugin
{
    [KernelFunction]
    [Description("Accesses the given file path string and returns the file contents as a string.")]
    public static string ReadLogFile(string filePath) => System.IO.File.ReadAllText(filePath);
}
var logFilePlugin = KernelPluginFactory.CreateFromType<LogFilePlugin>();

#!csharp

class DevopsPlugin
{
    private static void AppendToLogFile(string filepath, string content)
    {
        using (StreamWriter writer = new StreamWriter(filepath, true))
        {
            writer.WriteLine(content.Trim());
        }
    }
    [KernelFunction]
    [Description("A function that restarts the named service")]
    public static string RestartService(string serviceName = "", string logfile = "")
    {
        string logMessage = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] ALERT  DevopsAssistant: Multiple failures detected in {serviceName}. Restarting service.\n" +
                            $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] INFO  {serviceName}: Restart initiated.\n" +
                            $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] INFO  {serviceName}: Service restarted successfully.";
        AppendToLogFile(logfile, logMessage);
        return $"Service {serviceName} restarted successfully.";
    }
    [KernelFunction]
    [Description("A function that rolls back the transaction")]
    public static string RollbackTransaction(string logfile = "")
    {
        string logMessage = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] ALERT  DevopsAssistant: Transaction failure detected. Rolling back transaction batch.\n" +
                            $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] INFO   TransactionProcessor: Rolling back transaction batch.\n" +
                            $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] INFO   Transaction rollback completed successfully.";
        AppendToLogFile(logfile, logMessage);
        return "Transaction rolled back successfully.";
    }
    [KernelFunction]
    [Description("A function that redeploys the named resource")]
    public static string RedeployResource(string resourceName = "", string logfile = "")
    {
        string logMessage = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] ALERT  DevopsAssistant: Resource deployment failure detected in '{resourceName}'. Redeploying resource.\n" +
                            $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] INFO   DeploymentManager: Redeployment request submitted.\n" +
                            $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] INFO   DeploymentManager: Service successfully redeployed, resource '{resourceName}' created successfully.";
        AppendToLogFile(logfile, logMessage);
        return $"Resource '{resourceName}' redeployed successfully.";
    }
    [KernelFunction]
    [Description("A function that increases the quota")]
    public static string IncreaseQuota(string logfile = "")
    {
        string logMessage = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] ALERT  DevopsAssistant: High request volume detected. Increasing quota.\n" +
                            $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] INFO   APIManager: Quota increase request submitted.\n" +
                            $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] INFO   APIManager: Quota successfully increased to 150% of previous limit.";
        AppendToLogFile(logfile, logMessage);
        return "Successfully increased quota.";
    }
    [KernelFunction]
    [Description("A function that escalates the issue")]
    public static string EscalateIssue(string logfile = "")
    {
        string logMessage = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] ALERT  DevopsAssistant: Cannot resolve issue.\n" +
                            $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] ALERT  DevopsAssistant: Requesting escalation.";
        AppendToLogFile(logfile, logMessage);
        return "Submitted escalation request.";
    }
}
var devopsPlugin = KernelPluginFactory.CreateFromType<DevopsPlugin>();

#!csharp

DotEnv.Load();
var connectionString = EnvReader.GetStringValue("AZURE_AI_AGENT_PROJECT_CONNECTION_STRING");
var deployName = EnvReader.GetStringValue("AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME");

#!csharp

#pragma warning disable SKEXP0110
AIProjectClient client = AzureAIAgent.CreateAzureAIClient(connectionString, new DefaultAzureCredential());

#!csharp

AgentsClient agentsClient = client.GetAgentsClient();

#!csharp

var incidentManagerInstructions = """
    Analyze the given log file or the response from the devops assistant.
    Recommend which one of the following actions should be taken:

    Restart service {service_name}
    Rollback transaction
    Redeploy resource {resource_name}
    Increase quota

    If there are no issues or if the issue has already been resolved, respond with "INCIDENT_MANAGER > No action needed."
    If none of the options resolve the issue, respond with "Escalate issue."

    RULES:
    - Do not perform any corrective actions yourself.
    - Read the log file on every turn.
    - Prepend your response with this text: "INCIDENT_MANAGER > {logfilepath} | "
    - Only respond with the corrective action instructions.
    """;

// 1. Define an agent on the Azure AI agent service

Azure.AI.Projects.Agent azureAIProjectIncidentManagerAgent = agentsClient.CreateAgent(
    model: deployName,
    name: "INCIDENT_MANAGER",
    instructions: incidentManagerInstructions
);

#!csharp

#pragma warning disable SKEXP0110

// 2. Create a Semantic Kernel agent based on the agent definition
AzureAIAgent incidentManagerAgent = new(azureAIProjectIncidentManagerAgent, agentsClient, plugins: [logFilePlugin]);

#!csharp

var devopsManagerInstructions = """
    Read the instructions from the INCIDENT_MANAGER and apply the appropriate resolution function. 
    Return the response as "{function_response}"
    If the instructions indicate there are no issues or actions needed, 
    take no action and respond with "No action needed."

    RULES:
    - Use the instructions provided.
    - Do not read any log files yourself.
    - Prepend your response with this text: "DEVOPS_ASSISTANT > "
    """;

// 1. Define an agent on the Azure AI agent service

Azure.AI.Projects.Agent azureAIProjectDevopsManagerAgent = agentsClient.CreateAgent(
    model: deployName,
    name: "DEVOPS_ASSISTANT",
    instructions: devopsManagerInstructions
);

#!csharp

#pragma warning disable SKEXP0110

// 2. Create a Semantic Kernel agent based on the agent definition
AzureAIAgent devopsManagerAgent = new(azureAIProjectDevopsManagerAgent, agentsClient, plugins: [devopsPlugin]);

#!csharp

#pragma warning disable SKEXP0110
#pragma warning disable SKEXP0001
using System.Threading;

public class LabSelectionStragety: SelectionStrategy
{
    protected override async Task<Microsoft.SemanticKernel.Agents.Agent> SelectAgentAsync(
        IReadOnlyList<Microsoft.SemanticKernel.Agents.Agent> agents, 
        IReadOnlyList<ChatMessageContent> history, 
        CancellationToken cancellationToken = default)
    {
        await Task.CompletedTask.ConfigureAwait(false);
        ChatMessageContent last = history.Last();
        string agentName = (last.AuthorName == "DEVOPS_ASSISTANT" || last.Role == AuthorRole.User) 
            ? "INCIDENT_MANAGER" 
            : "DEVOPS_ASSISTANT";
        return agents.First(a => a.Name == agentName);
    }
}

#!csharp

#pragma warning disable SKEXP0110
public class ApprovalTerminationStragety : TerminationStrategy
{
    protected override async Task<bool> ShouldAgentTerminateAsync(
        Microsoft.SemanticKernel.Agents.Agent agent, 
        IReadOnlyList<ChatMessageContent> history, 
        CancellationToken cancellationToken)
    {
        await Task.CompletedTask.ConfigureAwait(false);
        var last = history.Last();
        return last.Content.EndsWith("no action needed.", StringComparison.OrdinalIgnoreCase);
    }
}

#!csharp

Directory.CreateDirectory("logs");
foreach (var logFile in Directory.EnumerateFiles("sample_logs", "*"))
{
    File.Copy(logFile, Path.Combine("logs", Path.GetFileName(logFile)), true);
}

#!csharp

#pragma warning disable SKEXP0110

foreach (var logFile in Directory.EnumerateFiles("logs", "*"))
{
    var chat = new AgentGroupChat(incidentManagerAgent, devopsManagerAgent)
    {
        ExecutionSettings = new()
        {
            SelectionStrategy = new LabSelectionStragety(),
            TerminationStrategy = new ApprovalTerminationStragety()
        }
    };

    chat.AddChatMessage(new ChatMessageContent(AuthorRole.User, $"USER > {logFile}"));
    Console.WriteLine($"Ready to process log file: {logFile}");

    // invoke a response from the agents
    var result = chat.InvokeAsync();
    await foreach (var message in result)
    {
        Console.WriteLine(message.Content);
    }

    Console.WriteLine();
}
